# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
    'use babel':
        'prefix': 'ub'
        'body': '\'use babel\';'
    'describe':
        'prefix': 'desc'
        'body': """
        describe('${1:description}', () => {
            it('should ${2:...}', () => {
                ${3}
            });
        });
        """
    'it':
        'prefix': 'it'
        'body': """
        it('should ${1:...}', () => {
            ${2}
        });
          """
    'beforeEach':
        'prefix': 'before'
        'body': """
        beforeEach(() => {
            ${1}
        });
        """
    'afterEach':
        'prefix': 'after'
        'body': """
        afterEach(() => {
            ${1}
        });
        """
    'expect':
        'prefix': 'expect'
        'body': 'expect(${1:thing}).to${2:Be}(${3:result});'
    'expect not':
        'prefix': 'expnot'
        'body': 'expect(${1:thing}).not.to${2:Be}(${3:expected});'